#!/usr/bin/env python3
# Copyright 2024 David Turner
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Generate a build.ninja file to build all things under projects/.

Copy this to a build.ninja file, then use `ninja configure` to first
configure all projects, then `ninja clean && time ninja $NINJA_ARGS`
to measure build times.

Precise measurement can be achived with hyperfine using:

```sh
tools/generate_plan.py > build.ninja
ninja configure
sudo systemd-run --scope -p AllowedCPUs=4-11 hyperfine -p 'ninja clean' 'ninja -j8' 'ninja -j8 --jobserver'
```
"""

import argparse
import os
import sys
from pathlib import Path

# Assume this file is in the tools/ directory.
TOP_DIR = Path(__file__).parent.parent


def main():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "--ninja", default="ninja", help="Specify path to Ninja binary."
    )
    args = parser.parse_args()

    build_plan = f"""# AUTO-GENERATED BY {os.path.basename(__file__)} - DO NOT EDIT

# The Ninja executable to invoke for sub-builds.
NINJA = {args.ninja}

# Location of the trace-generating script.
generate_trace_script = tools/generate_trace.py

# Location of the build plan generation script
generate_plan_script = tools/generate_plan.py

# Ensure that the plan is re-generated every time we modify
# the generation script.
rule regenerate_build_ninja
    command = echo "Regenerating build.ninja" && $in --ninja=${{NINJA}} > $out
    generator = 1

build build.ninja: regenerate_build_ninja ${{generate_plan_script}}

# A rule to run `ninja -t clean` in a given project.
rule ninja_clean
    command = $NINJA -C build/${{project}} -t clean

# A rule to run the cmake configuration step in a given project.
rule cmake_configure
    command = mkdir -p build/${{project}} && $
              ( cd build/${{project}} && $
                cmake -B . -S ../../projects/${{project}}${{cmake_src_suffix}} $
                      -GNinja -DCMAKE_MAKE_PROGRAM=$NINJA ) && $
              touch $out

# A rule to run a Ninja sub-build. This removes the logs, and runs Ninja.
# The logs are removed before the trace generation script will use the
# timestamp of the new log file as the starting time of all actions in it.
rule ninja_build
    command = rm -f build/${{project}}/.ninja_* && $
              $NINJA -C build/${{project}}

# A rule to generate the final build trace JSON file for all combined
# projects.
rule generate_trace
    command = ${{generate_trace_script}}  ${{logs}} > $out

"""

    all_clean_targets = []
    all_build_targets = []
    all_configure_targets = []
    all_ninja_logs = []

    projects = os.listdir(TOP_DIR / "projects")
    for project in projects:
        src_dir = TOP_DIR / "projects" / project
        if (src_dir / "CMakeLists.txt").exists():
            cmake_src_suffix = ""
        elif (src_dir / "build" / "cmake" / "CMakeLists.txt").exists():
            cmake_src_suffix = "/build/cmake"
        else:
            assert False, f"Cannot find CMakeList.txt for projects/{project}!!"

        configure_target = f"build/{project}.configure"
        build_target = f"build/{project}.stamp"
        clean_target = f"build/{project}.clean"

        all_configure_targets.append(configure_target)
        all_clean_targets.append(clean_target)
        all_build_targets.append(build_target)

        ninja_log = f"build/{project}/.ninja_log"
        all_ninja_logs.append(ninja_log)

        build_plan += f"""
build {configure_target}: cmake_configure
    project = {project}
    cmake_src_suffix = {cmake_src_suffix}

build {build_target}: ninja_build {configure_target}
    project = {project}

build {clean_target}: ninja_clean
    project = {project}
"""

    all_logs = " ".join(all_ninja_logs)

    build_plan += f"""
build configure: phony {' '.join(all_configure_targets)}

build clean: phony {' '.join(all_clean_targets)}

build build-all: phony {' '.join(all_build_targets)}

build build_trace.json: generate_trace | ${{generate_trace_script}} {all_logs}
     logs = {all_logs}

build generate-trace: phony build_trace.json

default build-all
"""

    print(build_plan)
    return 0


if __name__ == "__main__":
    sys.exit(main())
